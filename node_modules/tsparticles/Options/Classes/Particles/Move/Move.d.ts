import { MoveDirection, MoveDirectionAlt, OutMode, OutModeAlt } from "tsparticles/Enums";
import type { RangeValue, RecursivePartial } from "tsparticles/Types";
import { Attract } from "tsparticles/Options/Classes/Particles/Move/Attract";
import type { IDistance } from "tsparticles/Core";
import type { IMove } from "tsparticles/Options/Interfaces/Particles/Move/IMove";
import type { IOptionLoader } from "tsparticles/Options/Interfaces/IOptionLoader";
import { MoveAngle } from "tsparticles/Options/Classes/Particles/Move/MoveAngle";
import { MoveGravity } from "tsparticles/Options/Classes/Particles/Move/MoveGravity";
import { OutModes } from "tsparticles/Options/Classes/Particles/Move/OutModes";
import { Path } from "tsparticles/Options/Classes/Particles/Move/Path/Path";
import { Spin } from "tsparticles/Options/Classes/Particles/Move/Spin";
import { Trail } from "tsparticles/Options/Classes/Particles/Move/Trail";
export declare class Move implements IMove, IOptionLoader<IMove> {
    get collisions(): boolean;
    set collisions(value: boolean);
    get bounce(): boolean;
    set bounce(value: boolean);
    get out_mode(): OutMode | keyof typeof OutMode | OutModeAlt;
    set out_mode(value: OutMode | keyof typeof OutMode | OutModeAlt);
    get outMode(): OutMode | keyof typeof OutMode | OutModeAlt;
    set outMode(value: OutMode | keyof typeof OutMode | OutModeAlt);
    get noise(): Path;
    set noise(value: Path);
    angle: MoveAngle;
    attract: Attract;
    direction: MoveDirection | keyof typeof MoveDirection | MoveDirectionAlt | number;
    distance: Partial<IDistance>;
    decay: number;
    drift: RangeValue;
    enable: boolean;
    gravity: MoveGravity;
    path: Path;
    outModes: OutModes;
    random: boolean;
    size: boolean;
    speed: RangeValue;
    spin: Spin;
    straight: boolean;
    trail: Trail;
    vibrate: boolean;
    warp: boolean;
    constructor();
    load(data?: RecursivePartial<IMove>): void;
}
