import type { RangeValue, RecursivePartial } from "tsparticles/Types";
import { Background } from "tsparticles/Options/Classes/Background/Background";
import { BackgroundMask } from "tsparticles/Options/Classes/BackgroundMask/BackgroundMask";
import type { Engine } from "tsparticles/engine";
import { FullScreen } from "tsparticles/Options/Classes/FullScreen/FullScreen";
import type { IOptionLoader } from "tsparticles/Options/Interfaces/IOptionLoader";
import type { IOptions } from "tsparticles/Options/Interfaces/IOptions";
import { Interactivity } from "tsparticles/Options/Classes/Interactivity/Interactivity";
import { ManualParticle } from "tsparticles/Options/Classes/ManualParticle";
import { Motion } from "tsparticles/Options/Classes/Motion/Motion";
import { ParticlesOptions } from "tsparticles/Options/Classes/Particles/ParticlesOptions";
import { Responsive } from "tsparticles/Options/Classes/Responsive";
import { Theme } from "tsparticles/Options/Classes/Theme/Theme";
export declare class Options implements IOptions, IOptionLoader<IOptions> {
    #private;
    get fps_limit(): number;
    set fps_limit(value: number);
    get retina_detect(): boolean;
    set retina_detect(value: boolean);
    get backgroundMode(): FullScreen;
    set backgroundMode(value: FullScreen);
    autoPlay: boolean;
    background: Background;
    backgroundMask: BackgroundMask;
    detectRetina: boolean;
    duration: RangeValue;
    fpsLimit: number;
    fullScreen: FullScreen;
    interactivity: Interactivity;
    manualParticles: ManualParticle[];
    motion: Motion;
    particles: ParticlesOptions;
    pauseOnBlur: boolean;
    pauseOnOutsideViewport: boolean;
    preset?: string | string[];
    style: RecursivePartial<CSSStyleDeclaration>;
    responsive: Responsive[];
    themes: Theme[];
    zLayers: number;
    defaultDarkTheme?: string;
    defaultLightTheme?: string;
    [name: string]: unknown;
    constructor(engine: Engine);
    load(data?: RecursivePartial<IOptions>): void;
    setTheme(name?: string): void;
    setResponsive(width: number, pxRatio: number, defaultOptions: IOptions): number | undefined;
    private importPreset;
}
